FROM ubuntu:14.04.5

# Prepare ubuntu
ENV DEBIAN_FRONTEND noninteractive
RUN apt-key adv --fetch-keys http://dl.yarnpkg.com/debian/pubkey.gpg && \
    echo "deb http://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
RUN apt-get update
RUN locale-gen en_GB en_GB.UTF-8
RUN apt-get install -y curl git man yarn libfontconfig build-essential libkrb5-dev
RUN ln -sf /bin/bash /bin/sh

# Install supervisord
RUN apt-get install -y supervisor
RUN mkdir -p /var/log/supervisor
CMD /usr/bin/supervisord -n -c /etc/supervisor/supervisord.conf
ONBUILD COPY ./docker/supervisor.conf /etc/supervisor/conf.d/

# Configure standard environment
WORKDIR /root/app

# Configure node
ENV NODE_ENV live

# Install NVM
RUN curl -L https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | HOME=/root bash

# Invalidate cache if .nvmrc changes
ONBUILD COPY .nvmrc /root/app/.nvmrc-temp

# Make nvm install node specified in .nvmrc
ONBUILD RUN source /root/.nvm/nvm.sh && \

  # HACK: Without this, sourcing of nvm.sh would fail.
  #       nvm.sh Would try to load the version .nvmrc that is not yet installed
  mv /root/app/.nvmrc-temp /root/app/.nvmrc && \

  # Install nodejs version specified in .nvmrc
  nvm install && \
  nvm alias default && \
  ln -sf $(which node) /usr/bin/node && \
  ln -sf $(which npm) /usr/bin/npm

# yarn.lock and package.json are used to bust the cache
ONBUILD COPY yarn.lock /root/app/yarn.lock
ONBUILD COPY package.json /root/app/package.json
ONBUILD RUN NODE_ENV=development yarn install --pure-lockfile && \
  yarn cache clean

# manifest.json is generated by Makefile, used by the status check
ONBUILD COPY ./ /root/app/

# display installed nvm packages, should not be cached if any files changed
# Uncomment this when https://github.com/yarnpkg/yarn/pull/1463 is available
# ONBUILD RUN yarn ls --depth 0 || true
